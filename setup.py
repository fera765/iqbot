#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do Rob√¥ IQ Option
"""

import os
import sys
import subprocess
import shutil

def print_banner():
    """Imprime banner do rob√¥"""
    print("=" * 60)
    print("ü§ñ INSTALADOR DO ROB√î IQ OPTION")
    print("=" * 60)
    print("Este script ir√° configurar o rob√¥ de trading automaticamente")
    print("=" * 60)

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 7):
        print("‚ùå ERRO: Python 3.7 ou superior √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_dependencies():
    """Instala depend√™ncias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        # Atualiza pip
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Instala depend√™ncias
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def setup_environment():
    """Configura arquivo de ambiente"""
    print("\n‚öôÔ∏è  Configurando arquivo de ambiente...")
    
    env_file = ".env"
    env_example = ".env.example"
    
    if os.path.exists(env_file):
        print("‚ö†Ô∏è  Arquivo .env j√° existe!")
        overwrite = input("Deseja sobrescrever? (s/N): ").lower()
        if overwrite != 's':
            print("üìù Mantendo arquivo .env existente")
            return True
    
    if os.path.exists(env_example):
        shutil.copy(env_example, env_file)
        print("‚úÖ Arquivo .env criado!")
        print("üìù IMPORTANTE: Edite o arquivo .env com suas credenciais da IQ Option")
        return True
    else:
        print("‚ùå Arquivo .env.example n√£o encontrado!")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = ['logs', 'data']
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ Diret√≥rio '{directory}' criado")
        else:
            print(f"üìÅ Diret√≥rio '{directory}' j√° existe")

def run_tests():
    """Executa testes"""
    print("\nüß™ Executando testes...")
    
    try:
        result = subprocess.run([sys.executable, "test_bot.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Testes passaram!")
            return True
        else:
            print("‚ö†Ô∏è  Alguns testes falharam, mas o rob√¥ pode funcionar")
            print("Sa√≠da dos testes:")
            print(result.stdout)
            return True
            
    except FileNotFoundError:
        print("‚ö†Ô∏è  Arquivo de testes n√£o encontrado")
        return True

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    print("\n" + "=" * 60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Edite o arquivo .env com suas credenciais da IQ Option")
    print("2. Configure o arquivo config.py conforme suas prefer√™ncias")
    print("3. Teste o rob√¥ em modo backtest:")
    print("   python main.py --mode backtest")
    print("4. Execute o rob√¥ em modo live:")
    print("   python main.py --mode live")
    print("\n‚ö†Ô∏è  AVISOS IMPORTANTES:")
    print("- Sempre teste primeiro em modo backtest")
    print("- Comece com valores pequenos")
    print("- Monitore o rob√¥ durante a execu√ß√£o")
    print("- Trading envolve risco de perda de capital")
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")
    print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verifica Python
    if not check_python_version():
        sys.exit(1)
    
    # Instala depend√™ncias
    if not install_dependencies():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias")
        sys.exit(1)
    
    # Configura ambiente
    if not setup_environment():
        print("‚ùå Falha na configura√ß√£o do ambiente")
        sys.exit(1)
    
    # Cria diret√≥rios
    create_directories()
    
    # Executa testes
    run_tests()
    
    # Mostra pr√≥ximos passos
    show_next_steps()

if __name__ == "__main__":
    main()